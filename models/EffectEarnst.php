<?php

namespace app\models;

use app\services\ModelService;
use app\services\StringService;
use Yii;
use yii\db\Query;

/**
 * This is the model class for table "effect_earnst".
 *
 * @property string $id
 * @property string $phone
 * @property string $name
 * @property string $earnest
 * @property string $remark
 * @property string $create_time
 * @property string $effect_id
 */
class EffectEarnst extends \yii\db\ActiveRecord
{
    const INSET_EARNST = 89;
    const PAGE_SIZE_DEFAULT = 10;
    const FIELDS_EXTRA = [];
    const FIELDS_ADMIN = [
        'create_time',
        'name',
        'phone',
        'earnest',
        'remark',

    ];
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'effect_earnst';

    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['phone', 'name'], 'required'],
            [['remark'], 'string'],

            [['name'], 'string', 'min' => 1, 'max' => 8],
            [['create_time'], 'integer']
        ];
    }

    /**
     * @inheritdoc
     */
    public function beforeSave($insert)
    {

        if ($insert) {
            $this->earnest = self::INSET_EARNST;
            $this->create_time = time();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public static function pagination($where = [], $select = [], $page = 1, $size = self::PAGE_SIZE_DEFAULT, $orderBy = 'id DESC')
    {
        $select = array_diff($select, self::FIELDS_EXTRA);

        $offset = ($page - 1) * $size;
        $effectList = self::find()
            ->select($select)
            ->where($where)
            ->orderBy($orderBy)
            ->offset($offset)
            ->limit($size)
            ->asArray()
            ->all();

        foreach ($effectList as &$effect) {

            if(isset($effect['create_time'])){
                $effect['create_time']=date('Y-m-d H:i', $effect['create_time']);
            }
            $effect['earnest']=sprintf('%.2f',(float)$effect['earnest']*0.01);
        }

        $total = (int)self::find()->where($where)->asArray()->count();
        return ModelService::pageDeal($effectList, $total, $page, $size);
    }

    public static function getToday()
    {
        $year = date("Y");
        $month = date("m");
        $day = date("d");
        $start = mktime(0, 0, 0, $month, $day, $year);//当天开始时间戳
        $end = mktime(23, 59, 59, $month, $day, $year);//当天结束时间戳
        return [$start, $end];
    }

    /**
     * 样板间获取申请总数
     * @return string
     *
     */
    public static function getallapply(){

        return $sum=(new Query())->from('effect_earnst')->count('*');
    }


    /**
     * 样板间获取今日申请总数
     * @return string
     *
     */
    public static function gettodayapply(){
               $today=self::getToday();

        return $sum=(new Query())->from('effect_earnst')->where('create_time<='.$today[1])->andWhere('create_time>='.$today[0])->count('*');
    }

    /**
     * 样板间获取今日申请总定金
     * @return string
     *
     */
    public static function gettodayearnest(){

        $today=self::getToday();

        $sum=(new Query())->from('effect_earnst')->where('create_time<='.$today[1])->andWhere('create_time>='.$today[0])->sum("earnest");
        return sprintf('%.2f',(float)$sum*0.01);
    }

    /**
     * 样板间获取申请总定金
     * @return string
     *
     */
    public static function getallearnest(){

         $sum=(new Query())->from('effect_earnst')->sum("earnest");
        return sprintf('%.2f',(float)$sum*0.01);
    }
}